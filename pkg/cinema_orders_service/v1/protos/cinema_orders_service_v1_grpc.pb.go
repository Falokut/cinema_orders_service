// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: cinema_orders_service_v1.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CinemaOrdersServiceV1Client is the client API for CinemaOrdersServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CinemaOrdersServiceV1Client interface {
	GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*OrdersPreviews, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error)
	// Refund rules:
	// greater than or equal to 10 days remaining before screening = 100%
	// less than equal 5 days remaining before screening = 50%
	// equal 3 days remaining before screening  = 30%
	// if less than 3 days remaining before screening, the order is non-refundable
	RefundOrder(ctx context.Context, in *RefundOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetOccupiedPlaces(ctx context.Context, in *GetOccupiedPlacesRequest, opts ...grpc.CallOption) (*Places, error)
	GetScreeningsOccupiedPlacesCounts(ctx context.Context, in *GetScreeningsOccupiedPlacesCountsRequest, opts ...grpc.CallOption) (*ScreeningsOccupiedPlacesCount, error)
	ReservePlaces(ctx context.Context, in *ReservePlacesRequest, opts ...grpc.CallOption) (*ReservePlacesResponse, error)
	CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ProcessOrder(ctx context.Context, in *ProcessOrderRequest, opts ...grpc.CallOption) (*ProcessOrderResponse, error)
}

type cinemaOrdersServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewCinemaOrdersServiceV1Client(cc grpc.ClientConnInterface) CinemaOrdersServiceV1Client {
	return &cinemaOrdersServiceV1Client{cc}
}

func (c *cinemaOrdersServiceV1Client) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*OrdersPreviews, error) {
	out := new(OrdersPreviews)
	err := c.cc.Invoke(ctx, "/cinema_orders_service.CinemaOrdersServiceV1/GetOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaOrdersServiceV1Client) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/cinema_orders_service.CinemaOrdersServiceV1/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaOrdersServiceV1Client) RefundOrder(ctx context.Context, in *RefundOrderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cinema_orders_service.CinemaOrdersServiceV1/RefundOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaOrdersServiceV1Client) GetOccupiedPlaces(ctx context.Context, in *GetOccupiedPlacesRequest, opts ...grpc.CallOption) (*Places, error) {
	out := new(Places)
	err := c.cc.Invoke(ctx, "/cinema_orders_service.CinemaOrdersServiceV1/GetOccupiedPlaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaOrdersServiceV1Client) GetScreeningsOccupiedPlacesCounts(ctx context.Context, in *GetScreeningsOccupiedPlacesCountsRequest, opts ...grpc.CallOption) (*ScreeningsOccupiedPlacesCount, error) {
	out := new(ScreeningsOccupiedPlacesCount)
	err := c.cc.Invoke(ctx, "/cinema_orders_service.CinemaOrdersServiceV1/GetScreeningsOccupiedPlacesCounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaOrdersServiceV1Client) ReservePlaces(ctx context.Context, in *ReservePlacesRequest, opts ...grpc.CallOption) (*ReservePlacesResponse, error) {
	out := new(ReservePlacesResponse)
	err := c.cc.Invoke(ctx, "/cinema_orders_service.CinemaOrdersServiceV1/ReservePlaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaOrdersServiceV1Client) CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/cinema_orders_service.CinemaOrdersServiceV1/CancelReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaOrdersServiceV1Client) ProcessOrder(ctx context.Context, in *ProcessOrderRequest, opts ...grpc.CallOption) (*ProcessOrderResponse, error) {
	out := new(ProcessOrderResponse)
	err := c.cc.Invoke(ctx, "/cinema_orders_service.CinemaOrdersServiceV1/ProcessOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CinemaOrdersServiceV1Server is the server API for CinemaOrdersServiceV1 service.
// All implementations must embed UnimplementedCinemaOrdersServiceV1Server
// for forward compatibility
type CinemaOrdersServiceV1Server interface {
	GetOrders(context.Context, *GetOrdersRequest) (*OrdersPreviews, error)
	GetOrder(context.Context, *GetOrderRequest) (*Order, error)
	// Refund rules:
	// greater than or equal to 10 days remaining before screening = 100%
	// less than equal 5 days remaining before screening = 50%
	// equal 3 days remaining before screening  = 30%
	// if less than 3 days remaining before screening, the order is non-refundable
	RefundOrder(context.Context, *RefundOrderRequest) (*emptypb.Empty, error)
	GetOccupiedPlaces(context.Context, *GetOccupiedPlacesRequest) (*Places, error)
	GetScreeningsOccupiedPlacesCounts(context.Context, *GetScreeningsOccupiedPlacesCountsRequest) (*ScreeningsOccupiedPlacesCount, error)
	ReservePlaces(context.Context, *ReservePlacesRequest) (*ReservePlacesResponse, error)
	CancelReservation(context.Context, *CancelReservationRequest) (*emptypb.Empty, error)
	ProcessOrder(context.Context, *ProcessOrderRequest) (*ProcessOrderResponse, error)
	mustEmbedUnimplementedCinemaOrdersServiceV1Server()
}

// UnimplementedCinemaOrdersServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedCinemaOrdersServiceV1Server struct {
}

func (UnimplementedCinemaOrdersServiceV1Server) GetOrders(context.Context, *GetOrdersRequest) (*OrdersPreviews, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedCinemaOrdersServiceV1Server) GetOrder(context.Context, *GetOrderRequest) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedCinemaOrdersServiceV1Server) RefundOrder(context.Context, *RefundOrderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundOrder not implemented")
}
func (UnimplementedCinemaOrdersServiceV1Server) GetOccupiedPlaces(context.Context, *GetOccupiedPlacesRequest) (*Places, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOccupiedPlaces not implemented")
}
func (UnimplementedCinemaOrdersServiceV1Server) GetScreeningsOccupiedPlacesCounts(context.Context, *GetScreeningsOccupiedPlacesCountsRequest) (*ScreeningsOccupiedPlacesCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreeningsOccupiedPlacesCounts not implemented")
}
func (UnimplementedCinemaOrdersServiceV1Server) ReservePlaces(context.Context, *ReservePlacesRequest) (*ReservePlacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReservePlaces not implemented")
}
func (UnimplementedCinemaOrdersServiceV1Server) CancelReservation(context.Context, *CancelReservationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReservation not implemented")
}
func (UnimplementedCinemaOrdersServiceV1Server) ProcessOrder(context.Context, *ProcessOrderRequest) (*ProcessOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessOrder not implemented")
}
func (UnimplementedCinemaOrdersServiceV1Server) mustEmbedUnimplementedCinemaOrdersServiceV1Server() {}

// UnsafeCinemaOrdersServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CinemaOrdersServiceV1Server will
// result in compilation errors.
type UnsafeCinemaOrdersServiceV1Server interface {
	mustEmbedUnimplementedCinemaOrdersServiceV1Server()
}

func RegisterCinemaOrdersServiceV1Server(s grpc.ServiceRegistrar, srv CinemaOrdersServiceV1Server) {
	s.RegisterService(&CinemaOrdersServiceV1_ServiceDesc, srv)
}

func _CinemaOrdersServiceV1_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaOrdersServiceV1Server).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_orders_service.CinemaOrdersServiceV1/GetOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaOrdersServiceV1Server).GetOrders(ctx, req.(*GetOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaOrdersServiceV1_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaOrdersServiceV1Server).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_orders_service.CinemaOrdersServiceV1/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaOrdersServiceV1Server).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaOrdersServiceV1_RefundOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaOrdersServiceV1Server).RefundOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_orders_service.CinemaOrdersServiceV1/RefundOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaOrdersServiceV1Server).RefundOrder(ctx, req.(*RefundOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaOrdersServiceV1_GetOccupiedPlaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOccupiedPlacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaOrdersServiceV1Server).GetOccupiedPlaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_orders_service.CinemaOrdersServiceV1/GetOccupiedPlaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaOrdersServiceV1Server).GetOccupiedPlaces(ctx, req.(*GetOccupiedPlacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaOrdersServiceV1_GetScreeningsOccupiedPlacesCounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScreeningsOccupiedPlacesCountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaOrdersServiceV1Server).GetScreeningsOccupiedPlacesCounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_orders_service.CinemaOrdersServiceV1/GetScreeningsOccupiedPlacesCounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaOrdersServiceV1Server).GetScreeningsOccupiedPlacesCounts(ctx, req.(*GetScreeningsOccupiedPlacesCountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaOrdersServiceV1_ReservePlaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservePlacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaOrdersServiceV1Server).ReservePlaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_orders_service.CinemaOrdersServiceV1/ReservePlaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaOrdersServiceV1Server).ReservePlaces(ctx, req.(*ReservePlacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaOrdersServiceV1_CancelReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaOrdersServiceV1Server).CancelReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_orders_service.CinemaOrdersServiceV1/CancelReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaOrdersServiceV1Server).CancelReservation(ctx, req.(*CancelReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CinemaOrdersServiceV1_ProcessOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CinemaOrdersServiceV1Server).ProcessOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cinema_orders_service.CinemaOrdersServiceV1/ProcessOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CinemaOrdersServiceV1Server).ProcessOrder(ctx, req.(*ProcessOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CinemaOrdersServiceV1_ServiceDesc is the grpc.ServiceDesc for CinemaOrdersServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CinemaOrdersServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cinema_orders_service.CinemaOrdersServiceV1",
	HandlerType: (*CinemaOrdersServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrders",
			Handler:    _CinemaOrdersServiceV1_GetOrders_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _CinemaOrdersServiceV1_GetOrder_Handler,
		},
		{
			MethodName: "RefundOrder",
			Handler:    _CinemaOrdersServiceV1_RefundOrder_Handler,
		},
		{
			MethodName: "GetOccupiedPlaces",
			Handler:    _CinemaOrdersServiceV1_GetOccupiedPlaces_Handler,
		},
		{
			MethodName: "GetScreeningsOccupiedPlacesCounts",
			Handler:    _CinemaOrdersServiceV1_GetScreeningsOccupiedPlacesCounts_Handler,
		},
		{
			MethodName: "ReservePlaces",
			Handler:    _CinemaOrdersServiceV1_ReservePlaces_Handler,
		},
		{
			MethodName: "CancelReservation",
			Handler:    _CinemaOrdersServiceV1_CancelReservation_Handler,
		},
		{
			MethodName: "ProcessOrder",
			Handler:    _CinemaOrdersServiceV1_ProcessOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cinema_orders_service_v1.proto",
}
